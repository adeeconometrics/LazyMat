<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classlm_1_1UnaryExpr" kind="class" language="C++" prot="public">
    <compoundname>lm::UnaryExpr</compoundname>
    <includes local="no">LazyExpr.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Op</type>
      </param>
      <param>
        <type>typename Expr</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlm_1_1UnaryExpr_1acadc75f21a762b250b6b37506f06f4f9" prot="private" static="no" mutable="no">
        <type>Expr</type>
        <definition>Expr lm::UnaryExpr&lt; Op, Expr &gt;::expr</definition>
        <argsstring></argsstring>
        <name>expr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" line="53" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlm_1_1UnaryExpr_1a44a64ea11c43ac4ec8332ad7c131cb08" prot="private" static="no" mutable="no">
        <type>Op</type>
        <definition>Op lm::UnaryExpr&lt; Op, Expr &gt;::op</definition>
        <argsstring></argsstring>
        <name>op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" line="54" column="6" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlm_1_1UnaryExpr_1aeb6bee3837cf628c9189c2c0949b18c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::UnaryExpr&lt; Op, Expr &gt;::UnaryExpr</definition>
        <argsstring>(const Expr &amp;expr)</argsstring>
        <name>UnaryExpr</name>
        <param>
          <type>const Expr &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" line="48" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1UnaryExpr_1a8545e65d99c16d11a2f156283a5a2ced" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::UnaryExpr&lt; Op, Expr &gt;::operator()</definition>
        <argsstring>(std::size_t i, std::size_t j) const</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" line="50" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Template functor for unary expressions. Contains an abstract representation of unary ops and an API for recursively calling eval via <computeroutput>operator()</computeroutput> overload. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Op</parametername>
</parameternamelist>
<parameterdescription>
<para>Operator type specified in <computeroutput>LazyOps.hpp</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Expr</parametername>
</parameternamelist>
<parameterdescription>
<para>Unary expression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" line="46" column="30" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyExpr.hpp" bodystart="46" bodyend="55"/>
    <listofallmembers>
      <member refid="classlm_1_1UnaryExpr_1acadc75f21a762b250b6b37506f06f4f9" prot="private" virt="non-virtual"><scope>lm::UnaryExpr</scope><name>expr</name></member>
      <member refid="classlm_1_1UnaryExpr_1a44a64ea11c43ac4ec8332ad7c131cb08" prot="private" virt="non-virtual"><scope>lm::UnaryExpr</scope><name>op</name></member>
      <member refid="classlm_1_1UnaryExpr_1a8545e65d99c16d11a2f156283a5a2ced" prot="public" virt="non-virtual"><scope>lm::UnaryExpr</scope><name>operator()</name></member>
      <member refid="classlm_1_1UnaryExpr_1aeb6bee3837cf628c9189c2c0949b18c1" prot="public" virt="non-virtual"><scope>lm::UnaryExpr</scope><name>UnaryExpr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
