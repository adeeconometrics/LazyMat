<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4" kind="class" language="C++" prot="public">
    <compoundname>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>Row</declname>
        <defname>Row</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>Col</declname>
        <defname>Col</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1adb9ec6e92d0ac3680203e07a814ab315" prot="public" static="no">
        <type>typename std::array&lt; T, Row *Col &gt;::iterator</type>
        <definition>using lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::iterator =  typename std::array&lt;T, Row * Col&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="119" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a1afd4a93050ec3b94f5e9a6ee4c02a98" prot="public" static="no">
        <type>typename std::array&lt; T, Row *Col &gt;::const_iterator</type>
        <definition>using lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::const_iterator =  typename std::array&lt;T, Row * Col&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="120" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a45d08db5bc1d9e81274c2fa94c8adb7d" prot="private" static="yes" constexpr="yes" mutable="no">
        <type>constexpr std::size_t</type>
        <definition>constexpr std::size_t lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::chunk_size</definition>
        <argsstring></argsstring>
        <name>chunk_size</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="228" column="32" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a40533ccc70a5ef51e9bfed39ccf9471c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::array&lt; T, chunk_size &gt; &gt;</type>
        <definition>std::vector&lt;std::array&lt;T, chunk_size&gt; &gt; lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <initializer>{(Row * Col + chunk_size - 1) /
                                                chunk_size}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="229" column="15" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a3ddfe3cf629efab7c5405c49e09f50e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::Matrix</definition>
        <argsstring>()</argsstring>
        <name>Matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="123" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a9ff9c7833a046764728a7c6fb3688dd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::Matrix</definition>
        <argsstring>(const Matrix&lt; T, Row, Col &gt; &amp;other)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const <ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="128" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1abd9cfcd198dc2336ea8c7d988251fa53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::Matrix</definition>
        <argsstring>(Matrix&lt; T, Row, Col &gt; &amp;&amp;other)</argsstring>
        <name>Matrix</name>
        <param>
          <type><ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="130" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a9315f70ada6d294087b785e8adaf9716" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::Matrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; t_data)</argsstring>
        <name>Matrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt;</type>
          <declname>t_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="132" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="132" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a8574d991c75deddf4a03e0d65f282dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::Matrix</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;t_data)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>t_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="135" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="135" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a3e02a2d824d2f49204727456043b75b3" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::operator=</definition>
        <argsstring>(const Matrix&lt; T, Row, Col &gt; &amp;lhs) noexcept -&gt; Matrix&lt; T, Row, Col &gt; &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="148" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="148" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a70bb2feec74a167569d6bbdfc9f56bfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::operator=</definition>
        <argsstring>(Matrix&lt; T, Row, Col &gt; &amp;&amp;lhs) -&gt; Matrix&lt; T, Row, Col &gt; &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;&amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="154" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1abbb3a395c9d8e06a4bd8e9cc4b7b7f37" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::operator()</definition>
        <argsstring>(std::size_t i, std::size_t j) const noexcept -&gt; T</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="159" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1acfb886e83277fc41d79c73bdb7623425" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::operator()</definition>
        <argsstring>(std::size_t i, std::size_t j) noexcept -&gt; T &amp;</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="165" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1afd10cd080dc66d29e90faae262f6065f" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::dims</definition>
        <argsstring>() const noexcept -&gt; std::pair&lt; std::size_t, std::size_t &gt;</argsstring>
        <name>dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="171" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="171" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1abfdcc27c965b2aa986c744200b657e1b" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::row</definition>
        <argsstring>() const noexcept -&gt; std::size_t</argsstring>
        <name>row</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="175" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a54c4c5e33d7e21c126afd3d8a7145ba8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::col</definition>
        <argsstring>() const noexcept -&gt; std::size_t</argsstring>
        <name>col</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="177" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a88ec909885414aca5248df440044c3e4" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::begin</definition>
        <argsstring>() noexcept -&gt; iterator</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="179" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a240127b02f769b775e757f289a3742a9" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::end</definition>
        <argsstring>() noexcept -&gt; iterator</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="181" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="181" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1ac44acdc30e6a12f1cdd9c4d5aa5d517e" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::cbegin</definition>
        <argsstring>() const noexcept -&gt; const_iterator</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="188" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1afa216719296ec4de4e97a536a7eba62d" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::cend</definition>
        <argsstring>() const noexcept -&gt; const_iterator</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="192" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="192" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a92199d10a1a03a182b827c195299da98" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Expr</type>
          </param>
        </templateparamlist>
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::operator=</definition>
        <argsstring>(const Expr &amp;expr) -&gt; Matrix&lt; T, Row, Col &gt; &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>const Expr &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="200" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="200" bodyend="212"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a902a40d7e198202934cf9912afa82435" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>static auto lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;::flatten_initializer_list</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; t_data) -&gt; std::vector&lt; T &gt;</argsstring>
        <name>flatten_initializer_list</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt;</type>
          <declname>t_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="215" column="15" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="215" bodyend="225"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="117" column="15" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="117" bodyend="231"/>
    <listofallmembers>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a88ec909885414aca5248df440044c3e4" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>begin</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1ac44acdc30e6a12f1cdd9c4d5aa5d517e" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>cbegin</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1afa216719296ec4de4e97a536a7eba62d" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>cend</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a45d08db5bc1d9e81274c2fa94c8adb7d" prot="private" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>chunk_size</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a54c4c5e33d7e21c126afd3d8a7145ba8" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>col</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a1afd4a93050ec3b94f5e9a6ee4c02a98" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>const_iterator</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1afd10cd080dc66d29e90faae262f6065f" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>dims</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a240127b02f769b775e757f289a3742a9" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>end</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a902a40d7e198202934cf9912afa82435" prot="private" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>flatten_initializer_list</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1adb9ec6e92d0ac3680203e07a814ab315" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>iterator</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a40533ccc70a5ef51e9bfed39ccf9471c" prot="private" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>m_data</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a3ddfe3cf629efab7c5405c49e09f50e0" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a9ff9c7833a046764728a7c6fb3688dd9" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1abd9cfcd198dc2336ea8c7d988251fa53" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a9315f70ada6d294087b785e8adaf9716" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a8574d991c75deddf4a03e0d65f282dbc" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1abbb3a395c9d8e06a4bd8e9cc4b7b7f37" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>operator()</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1acfb886e83277fc41d79c73bdb7623425" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>operator()</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a3e02a2d824d2f49204727456043b75b3" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>operator=</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a70bb2feec74a167569d6bbdfc9f56bfd" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>operator=</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1a92199d10a1a03a182b827c195299da98" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>operator=</name></member>
      <member refid="classlm_1_1Matrix_3_01T_00_01Row_00_01Col_00_01std_1_1enable__if__t_3_07Row_01_5Col_08_01_4_0a_07STACK__FRAME_08_4_1abfdcc27c965b2aa986c744200b657e1b" prot="public" virt="non-virtual"><scope>lm::Matrix&lt; T, Row, Col, std::enable_if_t&lt;(Row *Col) &gt;=(STACK_FRAME)&gt;</scope><name>row</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
