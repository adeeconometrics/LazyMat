<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classlm_1_1Matrix" kind="class" language="C++" prot="public">
    <compoundname>lm::Matrix</compoundname>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>Row</declname>
        <defname>Row</defname>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>Col</declname>
        <defname>Col</defname>
      </param>
      <param>
        <type>typename</type>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classlm_1_1Matrix_1a5af3608d7451783583aaf522cbbdef16" prot="public" static="no">
        <type>typename std::array&lt; T, Row *Col &gt;::iterator</type>
        <definition>using lm::Matrix&lt; T, Row, Col, typename &gt;::iterator =  typename std::array&lt;T, Row * Col&gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="20" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classlm_1_1Matrix_1a96883eaaef46ac5e008e82b270e550c8" prot="public" static="no">
        <type>typename std::array&lt; T, Row *Col &gt;::const_iterator</type>
        <definition>using lm::Matrix&lt; T, Row, Col, typename &gt;::const_iterator =  typename std::array&lt;T, Row * Col&gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="21" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlm_1_1Matrix_1ad1aa7b25003f582947389daebafce7ce" prot="private" static="no" mutable="no">
        <type>std::array&lt; T, Row *Col &gt;</type>
        <definition>std::array&lt;T, Row * Col&gt; lm::Matrix&lt; T, Row, Col, typename &gt;::m_data</definition>
        <argsstring></argsstring>
        <name>m_data</name>
        <initializer>{}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="112" column="14" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlm_1_1Matrix_1a868478fb11c831c19513ee03938c6290" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, typename &gt;::Matrix</definition>
        <argsstring>()</argsstring>
        <name>Matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="24" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="24" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a39c52a210f3e443929c728583f51ee54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, typename &gt;::Matrix</definition>
        <argsstring>(const Matrix&lt; T, Row, Col &gt; &amp;other)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const <ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="26" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="26" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a89baf27b93e1c70caf27cc011945c341" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, typename &gt;::Matrix</definition>
        <argsstring>(Matrix&lt; T, Row, Col &gt; &amp;&amp;other)</argsstring>
        <name>Matrix</name>
        <param>
          <type><ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="28" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1aa60d38bbb7516adb34f2ce8e6fec39e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, typename &gt;::Matrix</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt; t_list)</argsstring>
        <name>Matrix</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; T &gt;&gt;</type>
          <declname>t_list</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="30" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="30" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a43a27fba244986b00f7f257f8c72cafd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, typename &gt;::Matrix</definition>
        <argsstring>(const std::array&lt; T, Row *Col &gt; &amp;t_data)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const std::array&lt; T, Row *Col &gt; &amp;</type>
          <declname>t_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="47" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a208720ec897434364ef94a2949dee81a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lm::Matrix&lt; T, Row, Col, typename &gt;::Matrix</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;t_data)</argsstring>
        <name>Matrix</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>t_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="49" column="3" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="49" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1abe5d6e205e2b20a71606f0cf7794860f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, typename &gt;::operator=</definition>
        <argsstring>(const Matrix&lt; T, Row, Col &gt; &amp;lhs) noexcept -&gt; Matrix&lt; T, Row, Col &gt; &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="57" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="57" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1af695fe19209d6296c30f235fb2a94b50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, typename &gt;::operator=</definition>
        <argsstring>(Matrix&lt; T, Row, Col &gt; &amp;&amp;lhs) -&gt; Matrix&lt; T, Row, Col &gt; &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classlm_1_1Matrix" kindref="compound">Matrix</ref>&lt; T, Row, Col &gt; &amp;&amp;</type>
          <declname>lhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="63" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1ae3c0f023f0d2b3535421cd695d4a207f" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, typename &gt;::operator[]</definition>
        <argsstring>(std::size_t index) -&gt; T &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="68" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1aeb27218deca05563ee0e035a628b267c" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, typename &gt;::operator[]</definition>
        <argsstring>(std::size_t index) const -&gt; const T &amp;</argsstring>
        <name>operator[]</name>
        <param>
          <type>std::size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="72" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a1cfbde868a350a2fc348ab1f420225e2" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, typename &gt;::operator()</definition>
        <argsstring>(std::size_t i, std::size_t j) const noexcept -&gt; T</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="76" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="76" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a4b8309bf6d928f64c342940caf2b2213" prot="public" static="no" constexpr="yes" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, typename &gt;::operator()</definition>
        <argsstring>(std::size_t i, std::size_t j) noexcept -&gt; T &amp;</argsstring>
        <name>operator()</name>
        <param>
          <type>std::size_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>j</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="80" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="80" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a64f28b54022796f0a50bceb1c75bd7f8" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, typename &gt;::dims</definition>
        <argsstring>() const noexcept -&gt; std::pair&lt; std::size_t, std::size_t &gt;</argsstring>
        <name>dims</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="84" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="84" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a979777f4a0e2e79fbfa2b9095b881816" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, typename &gt;::row</definition>
        <argsstring>() const noexcept -&gt; std::size_t</argsstring>
        <name>row</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="88" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a256d3c23a6d353fb4c8c6a74c9e4a8ac" prot="public" static="no" constexpr="yes" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>constexpr auto</type>
        <definition>constexpr auto lm::Matrix&lt; T, Row, Col, typename &gt;::col</definition>
        <argsstring>() const noexcept -&gt; std::size_t</argsstring>
        <name>col</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="90" column="18" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a971e2373fe596e2ba2aa360a6bf6a9bb" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, typename &gt;::begin</definition>
        <argsstring>() noexcept -&gt; iterator</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="92" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a2a320894ab639f4ccbcfb0093babb0b0" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, typename &gt;::end</definition>
        <argsstring>() noexcept -&gt; iterator</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="94" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1aec9f6a35acee52bf4984483b316d2271" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, typename &gt;::cbegin</definition>
        <argsstring>() const noexcept -&gt; const_iterator</argsstring>
        <name>cbegin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="96" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1aa01dafb60f3caf3a041868205c909409" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, typename &gt;::cend</definition>
        <argsstring>() const noexcept -&gt; const_iterator</argsstring>
        <name>cend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="98" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classlm_1_1Matrix_1a15c9b11c3350a513e473edf90b4a8818" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Expr</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto lm::Matrix&lt; T, Row, Col, typename &gt;::operator=</definition>
        <argsstring>(const Expr &amp;expr) -&gt; Matrix&lt; T, Row, Col &gt; &amp;</argsstring>
        <name>operator=</name>
        <param>
          <type>const Expr &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="101" column="8" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="101" bodyend="109"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" line="18" column="13" bodyfile="/mnt/c/Users/ddamiana/Documents/CodeProjects/personal/LazyMat/include/LazyMatrix.hpp" bodystart="18" bodyend="113"/>
    <listofallmembers>
      <member refid="classlm_1_1Matrix_1a971e2373fe596e2ba2aa360a6bf6a9bb" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>begin</name></member>
      <member refid="classlm_1_1Matrix_1aec9f6a35acee52bf4984483b316d2271" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>cbegin</name></member>
      <member refid="classlm_1_1Matrix_1aa01dafb60f3caf3a041868205c909409" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>cend</name></member>
      <member refid="classlm_1_1Matrix_1a256d3c23a6d353fb4c8c6a74c9e4a8ac" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>col</name></member>
      <member refid="classlm_1_1Matrix_1a96883eaaef46ac5e008e82b270e550c8" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>const_iterator</name></member>
      <member refid="classlm_1_1Matrix_1a64f28b54022796f0a50bceb1c75bd7f8" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>dims</name></member>
      <member refid="classlm_1_1Matrix_1a2a320894ab639f4ccbcfb0093babb0b0" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>end</name></member>
      <member refid="classlm_1_1Matrix_1a5af3608d7451783583aaf522cbbdef16" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>iterator</name></member>
      <member refid="classlm_1_1Matrix_1ad1aa7b25003f582947389daebafce7ce" prot="private" virt="non-virtual"><scope>lm::Matrix</scope><name>m_data</name></member>
      <member refid="classlm_1_1Matrix_1a868478fb11c831c19513ee03938c6290" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_1a39c52a210f3e443929c728583f51ee54" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_1a89baf27b93e1c70caf27cc011945c341" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_1aa60d38bbb7516adb34f2ce8e6fec39e8" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_1a43a27fba244986b00f7f257f8c72cafd" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_1a208720ec897434364ef94a2949dee81a" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>Matrix</name></member>
      <member refid="classlm_1_1Matrix_1a1cfbde868a350a2fc348ab1f420225e2" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>operator()</name></member>
      <member refid="classlm_1_1Matrix_1a4b8309bf6d928f64c342940caf2b2213" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>operator()</name></member>
      <member refid="classlm_1_1Matrix_1abe5d6e205e2b20a71606f0cf7794860f" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>operator=</name></member>
      <member refid="classlm_1_1Matrix_1af695fe19209d6296c30f235fb2a94b50" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>operator=</name></member>
      <member refid="classlm_1_1Matrix_1a15c9b11c3350a513e473edf90b4a8818" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>operator=</name></member>
      <member refid="classlm_1_1Matrix_1ae3c0f023f0d2b3535421cd695d4a207f" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>operator[]</name></member>
      <member refid="classlm_1_1Matrix_1aeb27218deca05563ee0e035a628b267c" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>operator[]</name></member>
      <member refid="classlm_1_1Matrix_1a979777f4a0e2e79fbfa2b9095b881816" prot="public" virt="non-virtual"><scope>lm::Matrix</scope><name>row</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
